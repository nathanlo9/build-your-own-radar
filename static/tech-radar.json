{
  "rings": [
    {
      "id": "adopt",
      "name": "Adopt",
      "color": "#93c47d"
    },
    {
      "id": "assess",
      "name": "Assess",
      "color": "#fbdb84"
    },
    {
      "id": "contain",
      "name": "Contain",
      "color": "#93d2c2"
    },
    {
      "id": "end-of-life",
      "name": "End-of-Life",
      "color": "#efafa9"
    }
  ],
  "quadrants": [
    {
      "id": "tools",
      "name": "Tools"
    },
    {
      "id": "platforms",
      "name": "Platforms"
    },
    {
      "id": "solutions",
      "name": "Solutions"
    },
    {
      "id": "techniques",
      "name": "Techniques"
    }
  ],
  "entries": [
    {
      "key": "data-product-thinking",
      "id": "data-product-thinking",
      "quadrant": "techniques",
      "title": "Data product thinking",
      "timeline": [
        {
          "moved": 1,
          "ringId": "adopt"
        }
      ],
      "description": "<p>Organizations actively adopt <strong><a href=\"https://www.thoughtworks.com/insights/e-books/modern-data-engineering-playbook/data-as-a-product\">data product thinking</a></strong> as a standard practice for managing data assets. This approach treats data as a product with its own lifecycle, quality standards and focus on meeting consumer needs. We now recommend it as default advice for data management, regardless of whether organizations choose architectures like <a href=\"/radar/techniques/data-mesh\">data mesh</a> or <a href=\"/radar/techniques/lakehouse-architecture\">lakehouse</a>.</p><p>We emphasize consumer-centricity in data product thinking to drive greater adoption and value realization. This means <a href=\"https://martinfowler.com/articles/designing-data-products.html\">designing data products</a> by working backward from use cases. We also focus on capturing and managing both business-relevant metadata and technical metadata using modern data catalogs like <a href=\"/radar/platforms/datahub\">DataHub</a>, <a href=\"/radar/platforms/collibra\">Collibra</a>, Atlan and Informatica. These practices improve data discoverability and usability. Additionally, we apply data product thinking to scale AI initiatives and create AI-ready data. This approach includes comprehensive lifecycle management, ensuring data is not only well-governed and high quality but also retired in compliance with legal and regulatory requirements when no longer needed.</p>",
      "url": "#"
    },
    {
      "key": "fuzz-testing",
      "id": "fuzz-testing",
      "quadrant": "techniques",
      "title": "Fuzz testing",
      "timeline": [
        {
          "moved": 1,
          "ringId": "adopt"
        }
      ],
      "description": "<p><strong>Fuzz testing</strong> , or simply fuzzing, is a testing technique that has been around for a long time but it is still one of the lesser-known techniques. The goal is to feed a software system all kinds of invalid input and observe its behavior. For an HTTP endpoint, for example, bad requests should result in 4<em>xx</em> errors, but fuzz testing often provokes 5<em>xx</em> errors or worse. Well-documented and supported by tools, fuzz testing is more relevant than ever with more AI-generated code and <a href=\"/radar/techniques/complacency-with-ai-generated-code\">complacency with AI generated code</a>. That means itâ€™s now a good time to adopt fuzz testing to ensure code remains robust and secure.</p>",
      "url": "#"
    }
  ]
}
